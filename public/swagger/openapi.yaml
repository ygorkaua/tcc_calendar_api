openapi: 3.0.0
info:
  title: 'Session Schedule API'
  version: '0.1'
paths:
  /v1/session/all:
    get:
      description: 'Return all session information'
      operationId: 'Return all session information'
      responses:
        '200':
          description: 'Return all session information'
  '/v1/session/{sessionId}':
    get:
      description: 'Return session with provided ID information'
      operationId: 'Return session with provided ID information'
      parameters:
        -
          name: sessionId
          in: query
          description: 'Session ID'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Return session information'
        '400':
          description: 'Return a error if provided session ID was not found'
    delete:
      description: 'Delete session'
      operationId: 'Delete session'
      parameters:
        -
          name: sessionId
          in: query
          description: 'Session ID'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 'Return a success message'
        '400':
          description: 'Return a error if can not delete session'
  '/v1/session/user/{userId}':
    get:
      description: 'Return sessions of user with provided ID'
      operationId: 'Return sessions of user with provided ID'
      parameters:
        -
          name: userId
          in: query
          description: 'User ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Return user sessions'
        '400':
          description: 'Return a error if sessions with provided user ID was not found'
  '/v1/session/professional/{professionalId}':
    get:
      description: 'Return sessions of professional with provided ID'
      operationId: 'Return sessions of professional with provided ID'
      parameters:
        -
          name: professionalId
          in: query
          description: 'Professional ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Return professional sessions'
        '400':
          description: 'Return a error if sessions with provided professional ID was not found'
  '/v1/create/user/{userId}/professional/{professionalId}/sessionDate/{sessionDate}':
    post:
      description: 'Create a new session with provided parameters'
      operationId: 'Create a new session with provided parameters'
      parameters:
        -
          name: userId
          in: query
          description: 'User ID'
          required: true
          schema:
            type: string
        -
          name: professionalId
          in: query
          description: 'Professional ID'
          required: true
          schema:
            type: string
        -
          name: sessionDate
          in: query
          description: 'Session date'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Return session and meet ID'
        '400':
          description: 'Return a error if can not create session'
  '/v1/session/{sessionId}/sessionDate/{sessionDate}':
    post:
      description: 'Update session date'
      operationId: 'Update session date'
      parameters:
        -
          name: sessionId
          in: query
          description: 'Session ID'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: sessionDate
          in: query
          description: 'New session date'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Return a success message'
        '400':
          description: 'Return a error if can not update session date'
